<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TestPlan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Config Vars" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">raspberrypi</stringProp>
            <stringProp name="Argument.desc">IP or DNS name of the target</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CEP_PORT" elementType="Argument">
            <stringProp name="Argument.name">CEP_PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.desc">Port used by CEP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BROKER_PORT" elementType="Argument">
            <stringProp name="Argument.name">BROKER_PORT</stringProp>
            <stringProp name="Argument.value">8081</stringProp>
            <stringProp name="Argument.desc">Port used by Broker</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">can be overriden by -Jname arguments on command line</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target host" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type: application/json" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446649389000</longProp>
        <longProp name="ThreadGroup.end_time">1446649389000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CEP Configuration" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;host&quot;:&quot;http://localhost:8080&quot;,&#xd;
  &quot;in&quot;:[&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room.*&quot;,&#xd;
      &quot;isPattern&quot;:&quot;true&quot;,&#xd;
      &quot;type&quot;:&quot;Room&quot;,&#xd;
      &quot;providers&quot;:[&quot;http://localhost:8081&quot;],&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot;,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;floor&quot;,&#xd;
          &quot;type&quot;:&quot;string&quot;&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }   ]&#xd;
        },&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;: [   { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }   ]&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;photo&quot;,&#xd;
          &quot;type&quot;:&quot;string&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;out&quot;:[&#xd;
    {&#xd;
      &quot;id&quot;:&quot;floor1&quot;,&#xd;
      &quot;type&quot;:&quot;Floor&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }]&#xd;
    } ,&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertTemperature&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;temperature&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }]&#xd;
    } ,&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertHumidity&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;humidity&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; } ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;:&quot;room1&quot;,&#xd;
      &quot;type&quot;:&quot;AlertPressure&quot;,&#xd;
      &quot;attributes&quot;:[&#xd;
        { &quot;name&quot;:&quot;pressure&quot;,&#xd;
          &quot;type&quot;:&quot;double&quot; ,&#xd;
          &quot;metadata&quot;:[{ &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; }]&#xd;
        } ,&#xd;
        {&#xd;
          &quot;name&quot;:&quot;time&quot;,&#xd;
          &quot;type&quot;:&quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;:&quot;location&quot;,&#xd;
          &quot;type&quot;:&quot;geo:point&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;brokers&quot;: [{ &quot;url&quot;:&quot;http://localhost:8081&quot; }                                      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;statements&quot;:[&#xd;
    &quot;INSERT  INTO Floor SELECT floor as id, avg(temperature) as  temperature, temperature_unit, avg(pressure) as pressure, pressure_unit, avg(humidity) as humidity, humidity_unit FROM  Room.win:time(1 min) GROUP BY floor OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertTemperature SELECT id, temperature ,  temperature_unit,  time , location  from Room where temperature &gt; 30.0  or temperature &lt; 10 OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertHumidity SELECT id, humidity ,   humidity_unit ,  time , location from Room where humidity&gt; 70.0 or humidity &lt; 10.0 OUTPUT LAST EVERY 10 sec&quot;,&#xd;
    &quot;INSERT   INTO AlertPressure SELECT id, pressure ,    pressure_unit ,  time , location from  Room where pressure&gt; 1025.0 or pressure &lt; 1000 OUTPUT LAST EVERY 10  sec&quot;&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/admin/config</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1446203175000</longProp>
        <longProp name="ThreadGroup.end_time">1446203175000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">A lot of devices, few requests</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Set timer: fast" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="WAIT" elementType="Argument">
              <stringProp name="Argument.name">WAIT</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.desc">time between requests in ms</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include CEP only" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-59279266">CEP only</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include CEP with Broker" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-1020810335">CEP with Broker</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2" enabled="false">
        <stringProp name="TestPlan.comments">Few devices, lots of requests</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446652410000</longProp>
        <longProp name="ThreadGroup.end_time">1446652410000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Set timer: slow" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="WAIT" elementType="Argument">
              <stringProp name="Argument.name">WAIT</stringProp>
              <stringProp name="Argument.value">10000</stringProp>
              <stringProp name="Argument.desc">time between requests in ms</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include CEP only" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-59279266">CEP only</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include CEP with Broker" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="-1020810335">CEP with Broker</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="CEP only" enabled="true">
        <stringProp name="TestPlan.comments">bypass the broker</stringProp>
      </TestFragmentController>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target CEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${CEP_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="CEP with Broker" enabled="true">
        <stringProp name="TestPlan.comments">Use broker</stringProp>
      </TestFragmentController>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Target Broker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${BROKER_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Model1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="1358040521">Plan de travail</stringProp>
            <stringProp name="-1082257669">TestPlan</stringProp>
            <stringProp name="997247477">Model1: Normal</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Model1: Normal" enabled="true"/>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">4</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;Room&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;,&#xd;
            &quot;attributes&quot;: [&#xd;
            {&#xd;
                &quot;name&quot;: &quot;temperature&quot;,&#xd;
                &quot;type&quot;: &quot;float&quot;,&#xd;
                &quot;value&quot;: &quot;26.5&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;name&quot;: &quot;pressure&quot;,&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;value&quot;: &quot;763&quot;&#xd;
            }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
         &quot;contextElements&quot;:&#xd;
         [&#xd;
             {&#xd;
                 &quot;type&quot;: &quot;Room&quot;,&#xd;
                 &quot;isPattern&quot;: &quot;false&quot;,&#xd;
                 &quot;id&quot;: &quot;room1&quot;,&#xd;
                 &quot;attributes&quot;: [&#xd;
                     {&#xd;
                         &quot;name&quot;: &quot;temperature&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                         &quot;value&quot;: 26.5,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                             { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; , &quot;value&quot;:&quot;celsius&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                          &quot;name&quot;: &quot;floor&quot;,&#xd;
                          &quot;type&quot;: &quot;string&quot;,&#xd;
                          &quot;value&quot;: &quot;floor1&quot;&#xd;
                      },&#xd;
                    {&#xd;
                         &quot;name&quot;: &quot;pressure&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                          &quot;value&quot;:  995.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                              { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,  &quot;value&quot;:&quot;bar&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                       {&#xd;
                         &quot;name&quot;: &quot;humidity&quot;,&#xd;
                         &quot;type&quot;: &quot;double&quot;,&#xd;
                           &quot;value&quot;:   75.0,&#xd;
                         &quot;metadatas&quot;: [&#xd;
                               { &quot;name&quot;:&quot;unit&quot;, &quot;type&quot;:&quot;string&quot; ,   &quot;value&quot;:&quot;percent&quot;}&#xd;
                           ]&#xd;
                      },&#xd;
                      {&#xd;
                           &quot;name&quot;:&quot;time&quot;,&#xd;
                           &quot;type&quot;:&quot;date&quot;,&#xd;
                           &quot;value&quot;:&quot;2015-11-05T10:11:34Z&quot;&#xd;
                      },&#xd;
                      {&#xd;
                      		&quot;name&quot;:&quot;location&quot;,&#xd;
                            &quot;type&quot;:&quot;geo:point&quot;,&#xd;
                            &quot;value&quot;:&quot;46.2323,1.023&quot;&#xd;
                      }&#xd;
                 ]&#xd;
              }&#xd;
            ],&#xd;
		&quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Error requests percent" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>1.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD JSON" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD TYPE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;RoomSMLKD&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext EMPTY" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ngsi10/updateContext</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateContext BAD PATH" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;contextElements&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;Room&quot;,&#xd;
            &quot;isPattern&quot;: &quot;false&quot;,&#xd;
            &quot;id&quot;: &quot;Room1&quot;,&#xd;
            &quot;attributes&quot;: [&#xd;
            {&#xd;
                &quot;name&quot;: &quot;temperature&quot;,&#xd;
                &quot;type&quot;: &quot;float&quot;,&#xd;
                &quot;value&quot;: &quot;26.5&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;name&quot;: &quot;pressure&quot;,&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;value&quot;: &quot;763&quot;&#xd;
            }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;updateAction&quot;: &quot;UPDATE&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">bad/path</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.yaxisscalemaxvalue">500</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
